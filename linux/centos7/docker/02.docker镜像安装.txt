
// TODO --01. mysql

    01.安装docker命令
        yum install docker
    02.拉取镜像
        docker pull mysql:5.7
    03.创建守护式容器
        docker run -di --name=a_mysql -p 3306:3306 -v/usr/local/data/mysql:/usr/local/mysql -v /usr/local/data/mysql/config:/usr/local/mysql/config -e MYSQL_ROOT_PASSWORD=123456 --privileged=true mysql:5.7

// TODO --02. tomcat

    01.拉取镜像
        docker pull tomcat:8.5-jre8
    02.创建守护式容器 (挂载目录webdata/logs)，（需要在webdata文件夹中配置tomcat的4个文件夹）
        docker run -di --name=a_tomcat -p 8080:8080 -v /usr/local/data/tomcat/webapps:/usr/local/tomcat/webapps -v /usr/local/data/tomcat/logs:/usr/local/tomcat/logs --privileged=true tomcat:8.5-jre8
        参数：  --privileged=true   (--privileged=true来解决挂载的目录没有权限的问题)
        [docker run -di --name=b_tomcat -p 8090:8080 tomcat:8.5-jre8]
// TODO --03. redis

    01.拉取镜像
        docker pull redis:3.2
    02.创建守护式容器
        docker run -di --name=a_redis -p 6379:6379 -v /usr/local/data/redis:/usr/local/redis --privileged=true redis:3.2

// TODO --04. mongodb

    01.拉取镜像
        docker pull mongodb:4.0
    02.创建守护式容器
        docker run -di --name a_mongodb -v /usr/local/data/mongodb:/usr/local/mongodb -p 27017:27017 --privileged=true mongodb:4.0
        -v后面的参数表示把数据文件挂载到宿主机的路径
        -p把mongo端口映射到宿主机的指定端口
        --auth表示连接mongodb需要授权

// TODO --05. nginx

    01.拉取Nginx镜像
        docker pull nginx
    02.创建Nginx容器（-v目录挂载）
        // docker run -di --name=a_nginx -p 80:80  nginx/bin/bash
        （正确的nginx容器挂载...）
        docker run -di --name=a_nginx -p 80:80 -v /usr/local/data/nginx/a_conf:/etc/nginx/a_conf -v /usr/local/data/nginx/log:/var/log/nginx -v /usr/local/data/nginx/html:/usr/share/nginx/html --privileged=true nginx


        --- a.配置反向代理
        官方的nginx镜像,nginx配置文件nginx.conf 在/etc/nginx/目录下。在容器内编辑配置文件不方便，我们可以先将配置文件从容器内拷贝到宿主机，编辑修改后再拷贝回去。

        --- b.从容器拷贝配置文件到宿主机
        [root@localhost ~]# docker cp a_nginx:/etc/nginx/nginx.conf /usr/local/data/nginx/nginx.conf
        --- //宿主机内的文件移动到容器中
        docker cp/usr/local/data/tomcat/classes/index.jsp a_tomcat:/usr/local/tomcat/webdata/ROOT

        docker run -di --name a_nginx -p 80:80 -v /usr/local/data/nginx/a_conf:/etc/nginx/a_conf -v /usr/local/data/nginx/html:/usr/share/nginx/html -v /usr/local/data/nginx/log:/var/log/nginx nginx
        -- 修改nginx.conf 添加如下配置：
        upstream tomcat-server {
        	server 172.17.0.3:8080;
        }
        server {
        	listen 80;
        	server_name www.pinyougou.com;
        	location / {
        		proxy_pass http://tomcat-server;
        		index index.html index.htm;
        	}
        }
      //TODO  --- c.将修改后的配置文件拷贝到容器
        docker cp /usr/local/data/nginx/nginx.conf  a_nginx:/etc/nginx/nginx.conf
      （docker cp a_nginx:/etc/nginx/nginx.conf /usr/local/data/nginx/nginx.conf）
--------------------------------------------------------------------------------------------------

// TODO --06. elk的安装   xxx（下面下载elasticsearch5.6.8）

    01.拉取Elasticsearch镜像
        docker pull sebp/elk
    02.创建Elasticsearch容器
        docker run -di --name a_elk -e ES_JAVA_OPTS="-Xms256m -Xmx256m" -p 5601:5601 -p 5044:5044 -p 9200:9200 -p 9300:9300 --privileged=true sebp/elk
      {
        docker pull elasticsearch
        docker run -di -e ES_JAVA_OPTS="-Xms256m -Xmx256m" -p 9200:9200 -p 9300:9300 --name b_elk a_elasticsearch
      }


   -- 其中 -e ES_JAVA_OPTS="-Xms256m -Xmx256m"为设置elasticsearch的使用内存大小为256m，原本默认为2G，这里如果不配置，可能会启动出错。

   -p 9200:9200 -p 9300:9300 表示开放9200和9300端口

   --name ES01表示命名为ES01
   ---------------------
   --- 由于sebp/elk中logstash的input的方式默认是filebeat,首先们需要进入elk容器中修改input方式。logstash默认会将etc/logstash/conf.d/中的配置文件进行整合然后启动。

    03.#进入容器    (开启容器:docker start ecbe60716cd3)
        docker exec -it elk /bin/bash
    04.#进入修改目录
        cd etc/logstash/conf.d/

    --- 修改 02-beats-input.conf 文件，修改如下：
    input {
        tcp {
        port => 5044
        codec => json_lines
        }
    }
    output{
        elasticsearch {
        hosts => ["localhost:9200"]
        }
    }

    --- 保存后，我们使用 control + P + Q 退出容器。然后重启容器，让我们的配置生效。
        docker restart elk

// TODO ---07. elasticsearch下载安装

    -- 01.拉取elasticsearch镜像
        docker pull elasticsearch:5.6.8
    -- 02.创建容器
        docker run -di -e ES_JAVA_OPTS="-Xms256m -Xmx256m" --name=a_es -v /usr/local/data/es/a_config:/usr/share/elasticsearch/config/a_config -p 9200:9200 -p 9300:9300 --privileged=true elasticsearch:5.6.8
        注:  9200端口(Web管理平台端口)  9300(服务默认端口)
        docker run -di -e ES_JAVA_OPTS="-Xms256m -Xmx256m" -p 9200:9200 -p 9300:9300 --name a_elk a_elasticsearch

// TODO ---08. RabbitMQ的安装和启动

    -- 01.拉取RabbitMQ镜像
          docker pull rabbitmq:management
    -- 02.创建RabbitMQ容器
          docker run -di --name=a_rabbitmq -p 5671:5617 -p 5672:5672 -p4369:4369 -p 15671:15671 -p 15672:15672 -p 25672:25672 --privileged=true rabbitmq:management
            -- 15672 (if management plugin is enabled.管理界面 )
          	-- 15671 management监听端口
          	-- 5672, 5671 (AMQP 0-9-1 without and with TLS 消息队列协议是一个消息协议)
          	-- 4369 (epmd) epmd 代表 Erlang 端口映射守护进程
          	-- 25672 (Erlang distribution)
     -- 03.输入用户名和密码，都为guest . 进入http://127.0.0.1:15672主界面


// TODO ---09. oracle安装

    -- 01.拉取oracle镜像
        docker pull docker.io/oraclelinux
    -- 02.安装oracle容器
        docker run -d -i -p 1521:15221 --name a_oracle oraclelinux
        
---------------------------------------------------------------------------------------

    对于运行在后台的docker容器，我们经常需要做的事情是进入到容器中，
    docker为我们提供了docker exec 、docker attach 命令，并且还提供了nsenter工具，
    外部工具供我们使用。docker attach存在的问题是：当多个窗口同时attach到同一个容器时，
    所有的窗口都会同步的显示，假如其中的一个窗口发生阻塞时，其它的窗口也会阻塞，
    docker attach命令可以说是最不方便的进入后台docker容器的方法。
    docker exec命令是在docker 1.3之后增加的一个比docker attach命令更加方便的命令。
    和docker exec差不多方便的命令是nsenter工具。

// TODO ---10. nsenter安装

    $ cd /tmp;
    $ curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;
    $ ./configure  --without-ncurses
    $ make nsenter && sudo cp nsenter /usr/local/bin

// TODO ---10.1 nsenter使用
    在使用nsenter命令之前需要获取到docker容器的进程，然后再使用nsenter工具进去到docker容器中，具体的使用方法如下：

    #每一个容器都有.State.Pid，所以这个命令除了容器的id需要我们根据docker ps -a去查找，其他的全部为固定的格式
    $ docker inspect -f {{.State.Pid}} 容器名或者容器id
      docker inspect -f {{.State.Pid}} 容器名或者容器id
    $ nsenter --target 上面查到的进程id --mount --uts --ipc --net --pid  #输入该命令便进入到容器中

---------------------------------------------------------------------------------------




